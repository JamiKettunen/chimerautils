--- date/date.c.orig	2021-04-09 02:24:01.000000000 +0200
+++ date/date.c	2022-07-27 20:30:38.834906597 +0200
@@ -58,9 +58,13 @@ __FBSDID("$FreeBSD$");
 #include <syslog.h>
 #include <unistd.h>
 #include <utmpx.h>
+#include <time.h>
+#include <langinfo.h>
 
 #include "vary.h"
 
+#include "compat.h"
+
 #ifndef	TM_YEAR_BASE
 #define	TM_YEAR_BASE	1900
 #endif
@@ -164,7 +168,14 @@ main(int argc, char *argv[])
 	if (!rflag && time(&tval) == -1)
 		err(1, "time");
 
-	format = "%+";
+	/* Linux libc's do not support %+ */
+#ifdef _DATE_FMT
+	/* glibc extension */
+	format = nl_langinfo(_DATE_FMT);
+#else
+	/* fallback, e.g. musl */
+	format = "%a %b %e %H:%M:%S %Z %Y";
+#endif
 
 	if (Rflag)
 		format = rfc2822_format;
@@ -344,14 +355,18 @@ setthetime(const char *fmt, const char *
 	if (!jflag) {
 		utx.ut_type = OLD_TIME;
 		memset(utx.ut_id, 0, sizeof(utx.ut_id));
-		(void)gettimeofday(&utx.ut_tv, NULL);
+		(void)gettimeofday(&tv, NULL);
+		utx.ut_tv.tv_sec = tv.tv_sec;
+		utx.ut_tv.tv_usec = tv.tv_usec;
 		pututxline(&utx);
 		tv.tv_sec = tval;
 		tv.tv_usec = 0;
 		if (settimeofday(&tv, NULL) != 0)
 			err(1, "settimeofday (timeval)");
 		utx.ut_type = NEW_TIME;
-		(void)gettimeofday(&utx.ut_tv, NULL);
+		(void)gettimeofday(&tv, NULL);
+		utx.ut_tv.tv_sec = tv.tv_sec;
+		utx.ut_tv.tv_usec = tv.tv_usec;
 		pututxline(&utx);
 
 		if ((p = getlogin()) == NULL)
