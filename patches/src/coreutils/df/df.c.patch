--- df/df.c.orig	2022-05-12 06:53:55.000000000 +0200
+++ df/df.c	2022-08-05 22:23:43.460842912 +0200
@@ -50,11 +50,10 @@ __FBSDID("$FreeBSD$");
 
 #include <sys/param.h>
 #include <sys/stat.h>
+#include <sys/statvfs.h>
 #include <sys/mount.h>
-#include <sys/sysctl.h>
 #include <err.h>
 #include <getopt.h>
-#include <libutil.h>
 #include <locale.h>
 #include <stdint.h>
 #include <stdio.h>
@@ -63,10 +62,39 @@ __FBSDID("$FreeBSD$");
 #include <sysexits.h>
 #include <unistd.h>
 #include <libxo/xo.h>
+#include <assert.h>
+#include <mntent.h>
+
+#include "compat.h"
 
 #define UNITS_SI	1
 #define UNITS_2		2
 
+/*
+ * Static list of network filesystems
+ *
+ * This replaces the makenetvfslist() function from FreeBSD, but this
+ * list should be made in to something we can generate at runtime or
+ * just expand the list.
+ */
+#define NETVFSLIST "nonfs,nosmb,nocifs"
+
+/* combining data from getmntent() and statvfs() on Linux */
+struct mntinfo {
+    char *f_mntfromname;          /* mnt_fsname from getmntent */
+    char *f_mntonname;            /* mnt_dir from getmntent */
+    char *f_fstypename;           /* mnt_fsname from getmntent */
+    char *f_opts;                 /* mnt_opts from getmntent */
+    unsigned long f_bsize;        /* f_bsize from statvfs */
+    fsblkcnt_t f_blocks;          /* f_blocks from statvfs */
+    fsblkcnt_t f_bfree;           /* f_bfree from statvfs */
+    fsblkcnt_t f_bavail;          /* f_bavail from statvfs */
+    fsfilcnt_t f_files;           /* f_files from statvfs */
+    fsfilcnt_t f_ffree;           /* f_ffree from statvfs */
+    unsigned long f_flag;         /* f_flag from statvfs */
+    unsigned int f_selected;      /* used internally here only */
+};
+
 /* Maximum widths of various fields. */
 struct maxwidths {
 	int	mntfrom;
@@ -78,20 +106,21 @@ struct maxwidths {
 	int	ifree;
 };
 
-static void	  addstat(struct statfs *, struct statfs *);
-static char	 *getmntpt(const char *);
+static void	  addstat(struct mntinfo *, struct mntinfo *);
+static char	 *getmntpt(struct mntinfo **, const size_t, const char *);
 static const char **makevfslist(char *fslist, int *skip);
 static int	  checkvfsname(const char *vfsname, const char **vfslist, int skip);
 static int	  checkvfsselected(char *);
 static int	  int64width(int64_t);
-static char	 *makenetvfslist(void);
-static void	  prthuman(const struct statfs *, int64_t);
+static void	  prthuman(const struct mntinfo *, int64_t);
 static void	  prthumanval(const char *, int64_t);
 static intmax_t	  fsbtoblk(int64_t, uint64_t, u_long);
-static void	  prtstat(struct statfs *, struct maxwidths *);
-static size_t	  regetmntinfo(struct statfs **, long);
-static void	  update_maxwidths(struct maxwidths *, const struct statfs *);
+static void	  prtstat(struct mntinfo *, struct maxwidths *);
+static size_t	  regetmntinfo(struct mntinfo **, long);
+static void	  update_maxwidths(struct maxwidths *, const struct mntinfo *);
 static void	  usage(void);
+static int	  getmntinfo(struct mntinfo **);
+static void	  freemntinfo(struct mntinfo *, int);
 
 static __inline int
 imax(int a, int b)
@@ -99,7 +128,7 @@ imax(int a, int b)
 	return (a > b ? a : b);
 }
 
-static int	  aflag = 0, cflag, hflag, iflag, kflag, lflag = 0, nflag, Tflag;
+static int	  aflag = 0, cflag, hflag, iflag, kflag, lflag = 0, Tflag;
 static int	  thousands;
 static int	  skipvfs_l, skipvfs_t;
 static const char **vfslist_l, **vfslist_t;
@@ -114,9 +143,9 @@ int
 main(int argc, char *argv[])
 {
 	struct stat stbuf;
-	struct statfs statfsbuf, totalbuf;
+	struct mntinfo *mntbuf = NULL;
+	struct mntinfo totalbuf;
 	struct maxwidths maxwidths;
-	struct statfs *mntbuf;
 	char *mntpt;
 	int i, mntsize;
 	int ch, rv;
@@ -125,13 +154,12 @@ main(int argc, char *argv[])
 	memset(&maxwidths, 0, sizeof(maxwidths));
 	memset(&totalbuf, 0, sizeof(totalbuf));
 	totalbuf.f_bsize = DEV_BSIZE;
-	strlcpy(totalbuf.f_mntfromname, "total", MNAMELEN);
 
 	argc = xo_parse_args(argc, argv);
 	if (argc < 0)
 		exit(1);
 
-	while ((ch = getopt_long(argc, argv, "+abcgHhiklmnPt:T,", long_options,
+	while ((ch = getopt_long(argc, argv, "+abcgHhiklmPt:T,", long_options,
 	    NULL)) != -1)
 		switch (ch) {
 		case 'a':
@@ -176,16 +204,13 @@ main(int argc, char *argv[])
 			/* Ignore duplicate -l */
 			if (lflag)
 				break;
-			vfslist_l = makevfslist(makenetvfslist(), &skipvfs_l);
+			vfslist_l = makevfslist(NETVFSLIST, &skipvfs_l);
 			lflag = 1;
 			break;
 		case 'm':
 			setenv("BLOCKSIZE", "1m", 1);
 			hflag = 0;
 			break;
-		case 'n':
-			nflag = 1;
-			break;
 		case 't':
 			if (vfslist_t != NULL)
 				xo_errx(1, "only one -t option may be specified");
@@ -205,32 +230,29 @@ main(int argc, char *argv[])
 	argv += optind;
 
 	rv = 0;
-	if (!*argv) {
-		/* everything (modulo -t) */
-		mntsize = getmntinfo(&mntbuf, MNT_NOWAIT);
-		mntsize = regetmntinfo(&mntbuf, mntsize);
-	} else {
-		/* just the filesystems specified on the command line */
-		mntbuf = malloc(argc * sizeof(*mntbuf));
-		if (mntbuf == NULL)
-			xo_err(1, "malloc()");
-		mntsize = 0;
-		/* continued in for loop below */
-	}
+	mntsize = getmntinfo(&mntbuf);
+	mntsize = regetmntinfo(&mntbuf, mntsize);
 
 	xo_open_container("storage-system-information");
 	xo_open_list("filesystem");
 
+	/* unselect all filesystems if an explicit list is given */
+	if (*argv) {
+		for (i = 0; i < mntsize; i++) {
+			mntbuf[i].f_selected = 0;
+		}
+	}
+
 	/* iterate through specified filesystems */
 	for (; *argv; argv++) {
 		if (stat(*argv, &stbuf) < 0) {
-			if ((mntpt = getmntpt(*argv)) == NULL) {
+			if ((mntpt = getmntpt(&mntbuf, mntsize, *argv)) == NULL) {
 				xo_warn("%s", *argv);
 				rv = 1;
 				continue;
 			}
 		} else if (S_ISCHR(stbuf.st_mode)) {
-			mntpt = getmntpt(*argv);
+			mntpt = getmntpt(&mntbuf, mntsize, *argv);
 			if (mntpt == NULL) {
 				xo_warnx("%s: not mounted", *argv);
 				rv = 1;
@@ -239,46 +261,27 @@ main(int argc, char *argv[])
 		} else {
 			mntpt = *argv;
 		}
-
-		/*
-		 * Statfs does not take a `wait' flag, so we cannot
-		 * implement nflag here.
-		 */
-		if (statfs(mntpt, &statfsbuf) < 0) {
-			xo_warn("%s", mntpt);
-			rv = 1;
-			continue;
-		}
-
-		/*
-		 * Check to make sure the arguments we've been given are
-		 * satisfied.  Return an error if we have been asked to
-		 * list a mount point that does not match the other args
-		 * we've been given (-l, -t, etc.).
-		 */
-		if (checkvfsselected(statfsbuf.f_fstypename) != 0) {
-			rv = 1;
-			continue;
+		for (i = 0; i < mntsize; i++) {
+			/* selected specified filesystems if the mount point or device matches */
+			if ((!strcmp(mntbuf[i].f_mntfromname, mntpt) || !strcmp(mntbuf[i].f_mntonname, mntpt)) && checkvfsselected(mntbuf[i].f_fstypename) == 0) {
+				mntbuf[i].f_selected = 1;
+				break;
+			}
 		}
-
-		/* the user asked for it, so ignore the ignore flag */
-		statfsbuf.f_flags &= ~MNT_IGNORE;
-
-		/* add to list */
-		mntbuf[mntsize++] = statfsbuf;
 	}
 
 	memset(&maxwidths, 0, sizeof(maxwidths));
 	for (i = 0; i < mntsize; i++) {
-		if (aflag || (mntbuf[i].f_flags & MNT_IGNORE) == 0) {
+		if ((aflag || (mntbuf[i].f_blocks > 0)) && mntbuf[i].f_selected) {
 			update_maxwidths(&maxwidths, &mntbuf[i]);
 			if (cflag)
 				addstat(&totalbuf, &mntbuf[i]);
 		}
 	}
-	for (i = 0; i < mntsize; i++)
-		if (aflag || (mntbuf[i].f_flags & MNT_IGNORE) == 0)
+	for (i = 0; i < mntsize; i++) {
+		if ((aflag || (mntbuf[i].f_blocks > 0)) && mntbuf[i].f_selected)
 			prtstat(&mntbuf[i], &maxwidths);
+	}
 
 	xo_close_list("filesystem");
 
@@ -287,19 +290,21 @@ main(int argc, char *argv[])
 
 	xo_close_container("storage-system-information");
 	xo_finish();
+	freemntinfo(mntbuf, mntsize);
 	exit(rv);
 }
 
 static char *
-getmntpt(const char *name)
+getmntpt(struct mntinfo **mntbuf, const size_t mntsize, const char *name)
 {
-	size_t mntsize, i;
-	struct statfs *mntbuf;
+	size_t i;
+
+	if (mntsize == 0 || mntbuf == NULL || name == NULL)
+		return NULL;
 
-	mntsize = getmntinfo(&mntbuf, MNT_NOWAIT);
 	for (i = 0; i < mntsize; i++) {
-		if (!strcmp(mntbuf[i].f_mntfromname, name))
-			return (mntbuf[i].f_mntonname);
+		if (mntbuf[i] == NULL)
+			continue;
 	}
 	return (NULL);
 }
@@ -379,42 +384,35 @@ checkvfsselected(char *fstypename)
 /*
  * Make a pass over the file system info in ``mntbuf'' filtering out
  * file system types not in vfslist_{l,t} and possibly re-stating to get
- * current (not cached) info.  Returns the new count of valid statfs bufs.
+ * current (not cached) info.  Returns the new count of valid statvfs bufs.
  */
 static size_t
-regetmntinfo(struct statfs **mntbufp, long mntsize)
+regetmntinfo(struct mntinfo **mntbufp, long mntsize)
 {
-	int error, i, j;
-	struct statfs *mntbuf;
+	int i, j;
+	struct mntinfo *mntbuf;
 
 	if (vfslist_l == NULL && vfslist_t == NULL)
-		return (nflag ? mntsize : getmntinfo(mntbufp, MNT_WAIT));
+		return mntsize;
 
 	mntbuf = *mntbufp;
 	for (j = 0, i = 0; i < mntsize; i++) {
-		if (checkvfsselected(mntbuf[i].f_fstypename) != 0)
+		if (checkvfsselected(mntbuf[i].f_fstypename) != 0) {
+			/* free dynamically allocated data */
+			free(mntbuf[i].f_fstypename);
+			free(mntbuf[i].f_mntfromname);
+			free(mntbuf[i].f_mntonname);
+			free(mntbuf[i].f_opts);
 			continue;
-		/*
-		 * XXX statfs(2) can fail for various reasons. It may be
-		 * possible that the user does not have access to the
-		 * pathname, if this happens, we will fall back on
-		 * "stale" filesystem statistics.
-		 */
-		error = statfs(mntbuf[i].f_mntonname, &mntbuf[j]);
-		if (nflag || error < 0)
-			if (i != j) {
-				if (error < 0)
-					xo_warnx("%s stats possibly stale",
-					    mntbuf[i].f_mntonname);
-				mntbuf[j] = mntbuf[i];
-			}
+		}
+		if (i != j) mntbuf[j] = mntbuf[i];
 		j++;
 	}
 	return (j);
 }
 
 static void
-prthuman(const struct statfs *sfsp, int64_t used)
+prthuman(const struct mntinfo *sfsp, int64_t used)
 {
 
 	prthumanval("  {:blocks/%6s}", sfsp->f_blocks * sfsp->f_bsize);
@@ -458,7 +456,7 @@ prthumanvalinode(const char *fmt, int64_
 }
 
 /*
- * Convert statfs returned file system size into BLOCKSIZE units.
+ * Convert statvfs returned file system size into BLOCKSIZE units.
  */
 static intmax_t
 fsbtoblk(int64_t num, uint64_t fsbs, u_long bs)
@@ -470,7 +468,7 @@ fsbtoblk(int64_t num, uint64_t fsbs, u_l
  * Print out status about a file system.
  */
 static void
-prtstat(struct statfs *sfsp, struct maxwidths *mwp)
+prtstat(struct mntinfo *sfsp, struct maxwidths *mwp)
 {
 	static long blocksize;
 	static int headerlen, timesthrough = 0;
@@ -544,7 +542,7 @@ prtstat(struct statfs *sfsp, struct maxw
 		    mwp->avail, fsbtoblk(sfsp->f_bavail,
 		    sfsp->f_bsize, blocksize));
 	}
-	xo_emit(" {:used-percent/%5.0f}{U:%%}",
+	xo_emit("   {:used-percent/%5.0f}{U:%%}",
 	    availblks == 0 ? 100.0 : (double)used / (double)availblks * 100.0);
 	if (iflag) {
 		inodes = sfsp->f_files;
@@ -566,23 +564,23 @@ prtstat(struct statfs *sfsp, struct maxw
 			(double)used / (double)inodes * 100.0);
 	} else
 		xo_emit("  ");
-	if (strncmp(sfsp->f_mntfromname, "total", MNAMELEN) != 0)
-		xo_emit("  {:mounted-on}", sfsp->f_mntonname);
+	if (strcmp(sfsp->f_mntfromname, "total") != 0)
+		xo_emit("{:mounted-on}", sfsp->f_mntonname);
 	xo_emit("\n");
 	xo_close_instance("filesystem");
 }
 
 static void
-addstat(struct statfs *totalfsp, struct statfs *statfsp)
+addstat(struct mntinfo *totalfsp, struct mntinfo *statvfsp)
 {
 	uint64_t bsize;
 
-	bsize = statfsp->f_bsize / totalfsp->f_bsize;
-	totalfsp->f_blocks += statfsp->f_blocks * bsize;
-	totalfsp->f_bfree += statfsp->f_bfree * bsize;
-	totalfsp->f_bavail += statfsp->f_bavail * bsize;
-	totalfsp->f_files += statfsp->f_files;
-	totalfsp->f_ffree += statfsp->f_ffree;
+	bsize = statvfsp->f_bsize / totalfsp->f_bsize;
+	totalfsp->f_blocks += statvfsp->f_blocks * bsize;
+	totalfsp->f_bfree += statvfsp->f_bfree * bsize;
+	totalfsp->f_bavail += statvfsp->f_bavail * bsize;
+	totalfsp->f_files += statvfsp->f_files;
+	totalfsp->f_ffree += statvfsp->f_ffree;
 }
 
 /*
@@ -590,7 +588,7 @@ addstat(struct statfs *totalfsp, struct
  * the file system specified by `sfsp'.
  */
 static void
-update_maxwidths(struct maxwidths *mwp, const struct statfs *sfsp)
+update_maxwidths(struct maxwidths *mwp, const struct mntinfo *sfsp)
 {
 	static long blocksize = 0;
 	int dummy;
@@ -642,69 +640,85 @@ usage(void)
 	exit(EX_USAGE);
 }
 
-static char *
-makenetvfslist(void)
+static int
+getmntinfo(struct mntinfo **mntbuf)
 {
-	char *str, *strptr, **listptr;
-	struct xvfsconf *xvfsp, *keep_xvfsp;
-	size_t buflen;
-	int cnt, i, maxvfsconf;
+	struct mntinfo *list = NULL;
+	struct mntinfo *current = NULL;
+	struct mntent *ent = NULL;
+	int mntsize = 0;
+	FILE *fp = NULL;
+	struct statvfs svfsbuf;
+
+#ifdef _PATH_MOUNTED
+	fp = setmntent(_PATH_MOUNTED, "r");
+#else
+	if (access("/proc/self/mounts", R_OK) == 0) {
+	    fp = setmntent("/proc/self/mounts", "r");
+	} else if (access("/proc/mounts", R_OK) == 0) {
+	    fp = setmntent("/proc/mounts", "r");
+	} else if (access("/etc/mtab", R_OK) == 0) {
+	    fp = setmntent("/etc/mtab", "r");
+	}
+#endif
+
+	if (fp == NULL) {
+	    err(1, "setmntent");
+	}
+
+	while ((ent = getmntent(fp)) != NULL) {
+	    /* skip if necessary */
+	    if (hasmntopt(ent, MNTTYPE_IGNORE) != NULL) {
+	        continue;
+	    }
+
+	    /* allocate the entry */
+	    list = realloc(list, (mntsize + 1) * sizeof(*list));
+	    assert(list != NULL);
+	    current = list + mntsize;
+
+	    /* fill the struct with getmntent fields */
+	    current->f_fstypename = strdup(ent->mnt_type);
+	    current->f_mntfromname = strdup(ent->mnt_fsname);
+	    current->f_mntonname = strdup(ent->mnt_dir);
+	    current->f_opts = strdup(ent->mnt_opts);
+
+	    /* get statvfs fields and copy those over */
+	    if (statvfs(current->f_mntonname, &svfsbuf) == -1) {
+	        if (errno == EPERM) continue;
+	        err(1, "statvfs");
+	    }
+
+	    current->f_flag = svfsbuf.f_flag;
+	    current->f_blocks = svfsbuf.f_blocks;
+	    current->f_bsize = svfsbuf.f_bsize;
+	    current->f_bfree = svfsbuf.f_bfree;
+	    current->f_bavail = svfsbuf.f_bavail;
+	    current->f_files = svfsbuf.f_files;
+	    current->f_ffree = svfsbuf.f_ffree;
+	    current->f_selected = 1;
 
-	if (sysctlbyname("vfs.conflist", NULL, &buflen, NULL, 0) < 0) {
-		xo_warn("sysctl(vfs.conflist)");
-		return (NULL);
-	}
-	xvfsp = malloc(buflen);
-	if (xvfsp == NULL) {
-		xo_warnx("malloc failed");
-		return (NULL);
-	}
-	keep_xvfsp = xvfsp;
-	if (sysctlbyname("vfs.conflist", xvfsp, &buflen, NULL, 0) < 0) {
-		xo_warn("sysctl(vfs.conflist)");
-		free(keep_xvfsp);
-		return (NULL);
+	    mntsize++;
 	}
-	maxvfsconf = buflen / sizeof(struct xvfsconf);
 
-	if ((listptr = malloc(sizeof(char*) * maxvfsconf)) == NULL) {
-		xo_warnx("malloc failed");
-		free(keep_xvfsp);
-		return (NULL);
-	}
+	endmntent(fp);
 
-	for (cnt = 0, i = 0; i < maxvfsconf; i++) {
-		if (xvfsp->vfc_flags & VFCF_NETWORK) {
-			listptr[cnt++] = strdup(xvfsp->vfc_name);
-			if (listptr[cnt-1] == NULL) {
-				xo_warnx("malloc failed");
-				free(listptr);
-				free(keep_xvfsp);
-				return (NULL);
-			}
-		}
-		xvfsp++;
-	}
+	*mntbuf = list;
+	return mntsize;
+}
 
-	if (cnt == 0 ||
-	    (str = malloc(sizeof(char) * (32 * cnt + cnt + 2))) == NULL) {
-		if (cnt > 0)
-			xo_warnx("malloc failed");
-		free(listptr);
-		free(keep_xvfsp);
-		return (NULL);
+static void
+freemntinfo(struct mntinfo *mntbuf, int mntsize)
+{
+	int i = 0;
+
+	for (i = 0; i < mntsize; i++) {
+	    free(mntbuf[i].f_fstypename);
+	    free(mntbuf[i].f_mntfromname);
+	    free(mntbuf[i].f_mntonname);
+	    free(mntbuf[i].f_opts);
 	}
 
-	*str = 'n'; *(str + 1) = 'o';
-	for (i = 0, strptr = str + 2; i < cnt; i++, strptr++) {
-		strlcpy(strptr, listptr[i], 32);
-		strptr += strlen(listptr[i]);
-		*strptr = ',';
-		free(listptr[i]);
-	}
-	*(--strptr) = '\0';
-
-	free(keep_xvfsp);
-	free(listptr);
-	return (str);
+	free(mntbuf);
+	return;
 }
