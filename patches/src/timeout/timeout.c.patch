--- timeout/timeout.c.orig	2021-04-09 02:24:12.000000000 +0200
+++ timeout/timeout.c	2022-07-27 21:50:58.093075438 +0200
@@ -28,7 +28,7 @@
 #include <sys/cdefs.h>
 __FBSDID("$FreeBSD$");
 
-#include <sys/procctl.h>
+#include <sys/prctl.h>
 #include <sys/time.h>
 #include <sys/wait.h>
 
@@ -43,8 +43,12 @@ __FBSDID("$FreeBSD$");
 #include <sysexits.h>
 #include <unistd.h>
 
+#include "compat.h"
+
 #define EXIT_TIMEOUT 124
 
+extern char *__progname;
+
 static sig_atomic_t sig_chld = 0;
 static sig_atomic_t sig_term = 0;
 static sig_atomic_t sig_alrm = 0;
@@ -56,7 +60,7 @@ usage(void)
 
 	fprintf(stderr, "Usage: %s [--signal sig | -s sig] [--preserve-status]"
 	    " [--kill-after time | -k time] [--foreground] <duration> <command>"
-	    " <arg ...>\n", getprogname());
+	    " <arg ...>\n", __progname);
 
 	exit(EX_USAGE);
 }
@@ -103,17 +107,19 @@ static int
 parse_signal(const char *str)
 {
 	int sig, i;
-	const char *errstr;
+	const char *signame;
 
-	sig = strtonum(str, 1, sys_nsig - 1, &errstr);
+	sig = strtoll(str, NULL, 10);
 
-	if (errstr == NULL)
+	if (errno != EINVAL && errno != ERANGE && sig > 1 && sig < NSIG)
 		return (sig);
+
 	if (strncasecmp(str, "SIG", 3) == 0)
 		str += 3;
 
-	for (i = 1; i < sys_nsig; i++) {
-		if (strcasecmp(str, sys_signame[i]) == 0)
+	for (i = 1; i < NSIG; i++) {
+		signame = signum_to_signame(i);
+		if (signame && strcasecmp(str, signame) == 0)
 			return (i);
 	}
 
@@ -174,8 +180,7 @@ main(int argc, char **argv)
 	bool do_second_kill = false;
 	bool child_done = false;
 	struct sigaction signals;
-	struct procctl_reaper_status info;
-	struct procctl_reaper_kill killemall;
+	unsigned long info;
 	int signums[] = {
 		-1,
 		SIGTERM,
@@ -228,8 +233,8 @@ main(int argc, char **argv)
 
 	if (!foreground) {
 		/* Acquire a reaper */
-		if (procctl(P_PID, getpid(), PROC_REAP_ACQUIRE, NULL) == -1)
-			err(EX_OSERR, "Fail to acquire the reaper");
+		if (prctl(PR_SET_CHILD_SUBREAPER, 1, 0, 0) == -1)
+			err(EX_OSERR, "Fail to set the reaper");
 	}
 
 	memset(&signals, 0, sizeof(signals));
@@ -297,9 +302,8 @@ main(int argc, char **argv)
 				if (foreground) {
 					break;
 				} else {
-					procctl(P_PID, getpid(),
-					    PROC_REAP_STATUS, &info);
-					if (info.rs_children == 0)
+					prctl(PR_GET_CHILD_SUBREAPER, &info, 0, 0);
+					if (info == 0)
 						break;
 				}
 			}
@@ -308,10 +312,8 @@ main(int argc, char **argv)
 
 			timedout = true;
 			if (!foreground) {
-				killemall.rk_sig = killsig;
-				killemall.rk_flags = 0;
-				procctl(P_PID, getpid(), PROC_REAP_KILL,
-				    &killemall);
+				if (kill(getpid(), SIGKILL) == -1)
+					err(EXIT_FAILURE, "kill");
 			} else
 				kill(pid, killsig);
 
@@ -325,10 +327,8 @@ main(int argc, char **argv)
 
 		} else if (sig_term) {
 			if (!foreground) {
-				killemall.rk_sig = sig_term;
-				killemall.rk_flags = 0;
-				procctl(P_PID, getpid(), PROC_REAP_KILL,
-				    &killemall);
+				if (kill(getpid(), SIGTERM) == -1)
+					err(EXIT_FAILURE, "kill");
 			} else
 				kill(pid, sig_term);
 
@@ -348,7 +348,7 @@ main(int argc, char **argv)
 	}
 
 	if (!foreground)
-		procctl(P_PID, getpid(), PROC_REAP_RELEASE, NULL);
+		prctl(PR_SET_CHILD_SUBREAPER, 0, 0, 0);
 
 	if (WEXITSTATUS(pstat))
 		pstat = WEXITSTATUS(pstat);
