--- grep/grep.c.orig	2022-07-28 20:50:22.533022373 +0200
+++ grep/grep.c	2022-07-28 21:17:09.043481357 +0200
@@ -53,6 +53,8 @@ __FBSDID("$FreeBSD$");
 
 #include "grep.h"
 
+extern char *__progname;
+
 const char	*errstr[] = {
 	"",
 /* 1*/	"(standard input)",
@@ -67,7 +69,11 @@ const char	*errstr[] = {
 
 /* Flags passed to regcomp() and regexec() */
 int		 cflags = REG_NOSUB | REG_NEWLINE;
+#ifdef REG_STARTEND
 int		 eflags = REG_STARTEND;
+#else
+int		 eflags = 0;
+#endif
 
 bool		 matchall;
 
@@ -145,7 +151,7 @@ bool	 file_err;	/* file reading error */
 static void
 usage(void)
 {
-	fprintf(stderr, errstr[3], getprogname());
+	fprintf(stderr, errstr[3], __progname);
 	fprintf(stderr, "%s", errstr[4]);
 	fprintf(stderr, "%s", errstr[5]);
 	fprintf(stderr, "%s", errstr[6]);
@@ -329,7 +335,7 @@ main(int argc, char *argv[])
 	 * exhibit. In this way we can have all the functionalities in one
 	 * binary without the need of scripting and using ugly hacks.
 	 */
-	pn = getprogname();
+	pn = __progname;
 	switch (pn[0]) {
 	case 'e':
 		grepbehave = GREP_EXTENDED;
@@ -547,7 +553,7 @@ main(int argc, char *argv[])
 			filebehave = FILE_MMAP;
 			break;
 		case 'V':
-			printf(errstr[8], getprogname(), VERSION);
+			printf(errstr[8], __progname, VERSION);
 			exit(0);
 		case 'v':
 			vflag = true;
