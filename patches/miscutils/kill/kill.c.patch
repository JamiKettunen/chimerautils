--- kill/kill.c.orig	2022-07-27 21:09:49.355810580 +0200
+++ kill/kill.c	2022-07-27 21:46:32.619212556 +0200
@@ -60,9 +60,10 @@ __FBSDID("$FreeBSD$");
 #include "bltin/bltin.h"
 #endif
 
+#include "compat.h"
+
 static void nosig(const char *);
 static void printsignals(FILE *);
-static int signame_to_signum(const char *);
 static void usage(void);
 
 int
@@ -91,9 +92,9 @@ main(int argc, char *argv[])
 				errx(2, "illegal signal number: %s", *argv);
 			if (numsig >= 128)
 				numsig -= 128;
-			if (numsig <= 0 || numsig >= sys_nsig)
+			if (numsig <= 0 || numsig >= NSIG)
 				nosig(*argv);
-			printf("%s\n", sys_signame[numsig]);
+			printf("%s\n", signum_to_signame(numsig));
 			return (0);
 		}
 		printsignals(stdout);
@@ -157,20 +158,6 @@ main(int argc, char *argv[])
 	return (errors);
 }
 
-static int
-signame_to_signum(const char *sig)
-{
-	int n;
-
-	if (strncasecmp(sig, "SIG", 3) == 0)
-		sig += 3;
-	for (n = 1; n < sys_nsig; n++) {
-		if (!strcasecmp(sys_signame[n], sig))
-			return (n);
-	}
-	return (-1);
-}
-
 static void
 nosig(const char *name)
 {
@@ -189,9 +176,9 @@ printsignals(FILE *fp)
 {
 	int n;
 
-	for (n = 1; n < sys_nsig; n++) {
-		(void)fprintf(fp, "%s", sys_signame[n]);
-		if (n == (sys_nsig / 2) || n == (sys_nsig - 1))
+	for (n = 1; n < NSIG; n++) {
+		(void)fprintf(fp, "%s", signum_to_signame(n));
+		if (n == (NSIG / 2) || n == (NSIG - 1))
 			(void)fprintf(fp, "\n");
 		else
 			(void)fprintf(fp, " ");
