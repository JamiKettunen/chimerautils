--- cmp/regular.c.orig	2022-07-30 21:43:49.447560054 +0200
+++ cmp/regular.c	2022-07-30 21:43:43.640128803 +0200
@@ -41,8 +41,8 @@ __FBSDID("$FreeBSD$");
 #include <sys/param.h>
 #include <sys/mman.h>
 #include <sys/stat.h>
+#include <sys/types.h>
 
-#include <capsicum_helpers.h>
 #include <err.h>
 #include <limits.h>
 #include <signal.h>
@@ -63,7 +63,6 @@ c_regular(int fd1, const char *file1, of
     int fd2, const char *file2, off_t skip2, off_t len2, off_t limit)
 {
 	struct sigaction act, oact;
-	cap_rights_t rights;
 	u_char ch, *p1, *p2, *m1, *m2, *e1, *e2;
 	off_t byte, length, line;
 	off_t pagemask, off1, off2;
@@ -100,13 +99,6 @@ c_regular(int fd1, const char *file1, of
 		return;
 	}
 
-	if (caph_rights_limit(fd1, cap_rights_init(&rights, CAP_MMAP_R)) < 0)
-		err(1, "unable to limit rights for %s", file1);
-	if (caph_rights_limit(fd2, cap_rights_init(&rights, CAP_MMAP_R)) < 0)
-		err(1, "unable to limit rights for %s", file2);
-	if (caph_enter() < 0)
-		err(ERR_EXIT, "unable to enter capability mode");
-
 	sigemptyset(&act.sa_mask);
 	act.sa_flags = SA_NODEFER;
 	act.sa_handler = segv_handler;
@@ -181,7 +173,7 @@ remmap(u_char *mem, int fd, off_t offset
 }
 
 static void
-segv_handler(int sig __unused) {
+segv_handler(int sig __attribute__((unused))) {
 	static const char msg[] = "cmp: Input/output error (caught SIGSEGV)\n";
 
 	write(STDERR_FILENO, msg, sizeof(msg));
