--- find/function.c.orig	2022-08-06 00:58:47.807788507 +0200
+++ find/function.c	2022-08-06 01:03:37.879480278 +0200
@@ -40,12 +40,12 @@ static const char sccsid[] = "@(#)functi
 __FBSDID("$FreeBSD$");
 
 #include <sys/param.h>
-#include <sys/ucred.h>
 #include <sys/stat.h>
 #include <sys/types.h>
-#include <sys/acl.h>
 #include <sys/wait.h>
 #include <sys/mount.h>
+#include <sys/sysmacros.h>
+#include <sys/statvfs.h>
 
 #include <dirent.h>
 #include <err.h>
@@ -64,6 +64,12 @@ __FBSDID("$FreeBSD$");
 
 #include "find.h"
 
+#include "compat.h"
+
+#ifndef REG_STARTEND
+#define REG_STARTEND 0
+#endif
+
 static PLAN *palloc(OPTION *);
 static long long find_parsenum(PLAN *, const char *, char *, char *);
 static long long find_parsetime(PLAN *, const char *, char *);
@@ -371,7 +377,7 @@ c_mXXdepth(OPTION *option, char ***argvp
  *	Show files with EXTENDED ACL attributes.
  */
 int
-f_acl(PLAN *plan __unused, FTSENT *entry)
+f_acl(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	acl_t facl;
 	acl_type_t acl_type;
@@ -418,7 +424,7 @@ f_acl(PLAN *plan __unused, FTSENT *entry
 #endif
 
 PLAN *
-c_acl(OPTION *option, char ***argvp __unused)
+c_acl(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 	return (palloc(option));
@@ -430,7 +436,7 @@ c_acl(OPTION *option, char ***argvp __un
  *	True always.  Makes its best shot and continues on regardless.
  */
 int
-f_delete(PLAN *plan __unused, FTSENT *entry)
+f_delete(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	/* ignore these from fts */
 	if (strcmp(entry->fts_accpath, ".") == 0 ||
@@ -475,7 +481,7 @@ f_delete(PLAN *plan __unused, FTSENT *en
 }
 
 PLAN *
-c_delete(OPTION *option, char ***argvp __unused)
+c_delete(OPTION *option, char ***argvp __attribute__((unused)))
 {
 
 	ftsoptions &= ~FTS_NOSTAT;	/* no optimise */
@@ -500,7 +506,7 @@ c_delete(OPTION *option, char ***argvp _
  *	Always true, used for -maxdepth, -mindepth, -xdev, -follow, and -true
  */
 int
-f_always_true(PLAN *plan __unused, FTSENT *entry __unused)
+f_always_true(PLAN *plan __attribute__((unused)), FTSENT *entry __attribute__((unused)))
 {
 	return 1;
 }
@@ -560,7 +566,7 @@ c_depth(OPTION *option, char ***argvp)
  *	True if the file or directory is empty
  */
 int
-f_empty(PLAN *plan __unused, FTSENT *entry)
+f_empty(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	if (S_ISREG(entry->fts_statp->st_mode) &&
 	    entry->fts_statp->st_size == 0)
@@ -588,7 +594,7 @@ f_empty(PLAN *plan __unused, FTSENT *ent
 }
 
 PLAN *
-c_empty(OPTION *option, char ***argvp __unused)
+c_empty(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 
@@ -865,7 +871,7 @@ c_flags(OPTION *option, char ***argvp)
  *	basis.
  */
 PLAN *
-c_follow(OPTION *option, char ***argvp __unused)
+c_follow(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_PHYSICAL;
 	ftsoptions |= FTS_LOGICAL;
@@ -874,6 +880,98 @@ c_follow(OPTION *option, char ***argvp _
 }
 
 #if HAVE_STRUCT_STATFS_F_FSTYPENAME
+struct mntinfo {
+    dev_t devn;
+    char fstype[64];
+};
+
+const char *
+f_fstypename(dev_t curdev)
+{
+	static struct mntinfo *minfo = NULL;
+	static size_t ninfos = 0;
+	/* to be freed */
+	if (!curdev) {
+		free(minfo);
+		minfo = NULL;
+		ninfos = 0;
+		return NULL;
+	}
+	if (!minfo) {
+		FILE *f = fopen("/proc/self/mountinfo", "rb");
+		if (!f)
+			return NULL;
+		char *lbuf = NULL;
+		size_t lsize = 0, ncap = 64;
+		minfo = malloc(ncap * sizeof(struct mntinfo));
+		if (!minfo)
+			err(1, "malloc");
+		const char *rfs = NULL;
+		while (getline(&lbuf, &lsize, f) > 0) {
+			unsigned long maj, min;
+			char *errp = NULL;
+			/* skip past mount id */
+			char *p = strchr(lbuf, ' ');
+			if (!p)
+				continue;
+			/* skip past parent id */
+			p = strchr(p + 1, ' ');
+			/* read device number */
+			maj = strtoul(p + 1, &errp, 10); /* read major */
+			if (*errp != ':')
+				continue;
+			p = errp;
+			errp = NULL;
+			min = strtoul(p + 1, &errp, 10); /* read minor */
+			if (*errp != ' ')
+				continue;
+			p = errp;
+			/* skip past root */
+			p = strchr(p + 1, ' ');
+			if (!p)
+				continue;
+			/* skip past mount point */
+			p = strchr(p + 1, ' ');
+			if (!p)
+				continue;
+			/* skip past mount options */
+			p = strchr(p + 1, ' ');
+			if (!p)
+				continue;
+			/* skip past optional fields */
+			p = strchr(p + 1, ' ');
+			if (!p)
+				continue;
+			/* skip past separator */
+			errp = strchr(++p, ' ');
+			if (!errp)
+				continue;
+			*errp = '\0';
+			if (ninfos == ncap) {
+				ncap *= 2;
+				minfo = realloc(minfo, ncap * sizeof(struct mntinfo));
+				if (!minfo)
+					err(1, "realloc");
+			}
+			minfo[ninfos].devn = makedev(maj, min);
+			snprintf(
+				minfo[ninfos].fstype, sizeof(minfo[ninfos].fstype), "%s", p
+			);
+			if (minfo[ninfos].devn == curdev)
+				rfs = minfo[ninfos].fstype;
+			++ninfos;
+		}
+		free(lbuf);
+		fclose(f);
+		return rfs;
+	}
+	for (size_t i = 0; i < ninfos; ++i) {
+		if (minfo[i].devn == curdev)
+			return minfo[i].fstype;
+	}
+	return NULL;
+}
+
 /*
  * -fstype functions --
  *
@@ -884,9 +982,9 @@ f_fstype(PLAN *plan, FTSENT *entry)
 {
 	static dev_t curdev;	/* need a guaranteed illegal dev value */
 	static int first = 1;
-	struct statfs sb;
-	static int val_flags;
-	static char fstype[sizeof(sb.f_fstypename)];
+	struct statvfs sb;
+	static unsigned long val_flags;
+	static const char *fstype;
 	char *p, save[2] = {0,0};
 
 	if ((plan->flags & F_MTMASK) == F_MTUNKNOWN)
@@ -897,7 +995,7 @@ f_fstype(PLAN *plan, FTSENT *entry)
 		curdev = entry->fts_statp->st_dev;
 
 		/*
-		 * Statfs follows symlinks; find wants the link's filesystem,
+		 * Statvfs follows symlinks; find wants the link's filesystem,
 		 * not where it points.
 		 */
 		if (entry->fts_info == FTS_SL ||
@@ -913,7 +1011,7 @@ f_fstype(PLAN *plan, FTSENT *entry)
 		} else
 			p = NULL;
 
-		if (statfs(entry->fts_accpath, &sb)) {
+		if (statvfs(entry->fts_accpath, &sb)) {
 			if (!ignore_readdir_race || errno != ENOENT) {
 				warn("statfs: %s", entry->fts_accpath);
 				exitstatus = 1;
@@ -932,14 +1030,14 @@ f_fstype(PLAN *plan, FTSENT *entry)
 		 * Further tests may need both of these values, so
 		 * always copy both of them.
 		 */
-		val_flags = sb.f_flags;
-		strlcpy(fstype, sb.f_fstypename, sizeof(fstype));
+		val_flags = sb.f_flag;
+		fstype = f_fstypename(curdev);
 	}
 	switch (plan->flags & F_MTMASK) {
 	case F_MTFLAG:
 		return val_flags & plan->mt_data;
 	case F_MTTYPE:
-		return (strncmp(fstype, plan->c_data, sizeof(fstype)) == 0);
+		return fstype && (strcmp(fstype, plan->c_data) == 0);
 	default:
 		abort();
 	}
@@ -956,17 +1054,10 @@ c_fstype(OPTION *option, char ***argvp)
 
 	new = palloc(option);
 	switch (*fsname) {
-	case 'l':
-		if (!strcmp(fsname, "local")) {
-			new->flags |= F_MTFLAG;
-			new->mt_data = MNT_LOCAL;
-			return new;
-		}
-		break;
 	case 'r':
 		if (!strcmp(fsname, "rdonly")) {
 			new->flags |= F_MTFLAG;
-			new->mt_data = MNT_RDONLY;
+			new->mt_data = ST_RDONLY;
 			return new;
 		}
 		break;
@@ -1028,7 +1119,7 @@ c_group(OPTION *option, char ***argvp)
  */
 
 PLAN *
-c_ignore_readdir_race(OPTION *option, char ***argvp __unused)
+c_ignore_readdir_race(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	if (strcmp(option->name, "-ignore_readdir_race") == 0)
 		ignore_readdir_race = 1;
@@ -1123,14 +1214,14 @@ c_links(OPTION *option, char ***argvp)
  *	Always true - prints the current entry to stdout in "ls" format.
  */
 int
-f_ls(PLAN *plan __unused, FTSENT *entry)
+f_ls(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	printlong(entry->fts_path, entry->fts_accpath, entry->fts_statp);
 	return 1;
 }
 
 PLAN *
-c_ls(OPTION *option, char ***argvp __unused)
+c_ls(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 	isoutput = 1;
@@ -1259,13 +1350,15 @@ c_newer(OPTION *option, char ***argvp)
  *	of the getgrnam() 9.2.1 [POSIX.1] function returns NULL.
  */
 int
-f_nogroup(PLAN *plan __unused, FTSENT *entry)
+f_nogroup(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
-	return group_from_gid(entry->fts_statp->st_gid, 1) == NULL;
+	struct group *gr;
+	gr = getgrgid(entry->fts_statp->st_gid);
+	return gr == NULL;
 }
 
 PLAN *
-c_nogroup(OPTION *option, char ***argvp __unused)
+c_nogroup(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 
@@ -1279,13 +1372,15 @@ c_nogroup(OPTION *option, char ***argvp
  *	of the getpwuid() 9.2.2 [POSIX.1] function returns NULL.
  */
 int
-f_nouser(PLAN *plan __unused, FTSENT *entry)
+f_nouser(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
-	return user_from_uid(entry->fts_statp->st_uid, 1) == NULL;
+	struct passwd *pw;
+	pw = getpwuid(entry->fts_statp->st_uid);
+	return pw == NULL;
 }
 
 PLAN *
-c_nouser(OPTION *option, char ***argvp __unused)
+c_nouser(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 
@@ -1320,7 +1415,7 @@ f_perm(PLAN *plan, FTSENT *entry)
 	mode_t mode;
 
 	mode = entry->fts_statp->st_mode &
-	    (S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO);
+	    (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO);
 	if (plan->flags & F_ATLEAST)
 		return (plan->m_data | mode) == mode;
 	else if (plan->flags & F_ANY)
@@ -1365,14 +1460,14 @@ c_perm(OPTION *option, char ***argvp)
  *	standard output.
  */
 int
-f_print(PLAN *plan __unused, FTSENT *entry)
+f_print(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	(void)puts(entry->fts_path);
 	return 1;
 }
 
 PLAN *
-c_print(OPTION *option, char ***argvp __unused)
+c_print(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	isoutput = 1;
 
@@ -1386,7 +1481,7 @@ c_print(OPTION *option, char ***argvp __
  *	standard output followed by a NUL character
  */
 int
-f_print0(PLAN *plan __unused, FTSENT *entry)
+f_print0(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	fputs(entry->fts_path, stdout);
 	fputc('\0', stdout);
@@ -1401,7 +1496,7 @@ f_print0(PLAN *plan __unused, FTSENT *en
  *	Prune a portion of the hierarchy.
  */
 int
-f_prune(PLAN *plan __unused, FTSENT *entry)
+f_prune(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	if (fts_set(tree, entry, FTS_SKIP))
 		err(1, "%s", entry->fts_path);
@@ -1480,7 +1575,7 @@ c_regex(OPTION *option, char ***argvp)
 /* c_simple covers c_prune, c_openparen, c_closeparen, c_not, c_or, c_true, c_false */
 
 PLAN *
-c_simple(OPTION *option, char ***argvp __unused)
+c_simple(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	return palloc(option);
 }
@@ -1562,7 +1657,7 @@ c_size(OPTION *option, char ***argvp)
  *      than we expect based on its size.
  */
 int
-f_sparse(PLAN *plan __unused, FTSENT *entry)
+f_sparse(PLAN *plan __attribute__((unused)), FTSENT *entry)
 {
 	off_t expected_blocks;
 
@@ -1571,7 +1666,7 @@ f_sparse(PLAN *plan __unused, FTSENT *en
 }
 
 PLAN *
-c_sparse(OPTION *option, char ***argvp __unused)
+c_sparse(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions &= ~FTS_NOSTAT;
 
@@ -1692,7 +1787,7 @@ c_user(OPTION *option, char ***argvp)
  *	different device ID (st_dev, see stat() S5.6.2 [POSIX.1])
  */
 PLAN *
-c_xdev(OPTION *option, char ***argvp __unused)
+c_xdev(OPTION *option, char ***argvp __attribute__((unused)))
 {
 	ftsoptions |= FTS_XDEV;
 
@@ -1723,13 +1818,13 @@ f_expr(PLAN *plan, FTSENT *entry)
  */
 
 int
-f_openparen(PLAN *plan __unused, FTSENT *entry __unused)
+f_openparen(PLAN *plan __attribute__((unused)), FTSENT *entry __attribute__((unused)))
 {
 	abort();
 }
 
 int
-f_closeparen(PLAN *plan __unused, FTSENT *entry __unused)
+f_closeparen(PLAN *plan __attribute__((unused)), FTSENT *entry __attribute__((unused)))
 {
 	abort();
 }
@@ -1741,7 +1836,7 @@ f_closeparen(PLAN *plan __unused, FTSENT
  * AND operator. Since AND is implicit, no node is allocated.
  */
 PLAN *
-c_and(OPTION *option __unused, char ***argvp __unused)
+c_and(OPTION *option __attribute__((unused)), char ***argvp __attribute__((unused)))
 {
 	return NULL;
 }
@@ -1795,7 +1890,7 @@ f_or(PLAN *plan, FTSENT *entry)
  *	Always false.
  */
 int
-f_false(PLAN *plan __unused, FTSENT *entry __unused)
+f_false(PLAN *plan __attribute__((unused)), FTSENT *entry __attribute__((unused)))
 {
 	return 0;
 }
@@ -1808,7 +1903,7 @@ f_false(PLAN *plan __unused, FTSENT *ent
  *	Exits the program
  */
 int
-f_quit(PLAN *plan __unused, FTSENT *entry __unused)
+f_quit(PLAN *plan __attribute__((unused)), FTSENT *entry __attribute__((unused)))
 {
 	finish_execplus();
 	exit(exitstatus);
