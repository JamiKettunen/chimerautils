--- write/write.c.orig	2022-07-28 20:19:41.509699355 +0200
+++ write/write.c	2022-07-28 20:33:19.253466889 +0200
@@ -48,23 +48,22 @@ static char sccsid[] = "@(#)write.c	8.1
 __FBSDID("$FreeBSD$");
 
 #include <sys/param.h>
-#include <sys/capsicum.h>
-#include <sys/filio.h>
-#include <sys/signal.h>
 #include <sys/stat.h>
 #include <sys/time.h>
 
-#include <capsicum_helpers.h>
 #include <ctype.h>
 #include <err.h>
 #include <errno.h>
+#include <fcntl.h>
 #include <locale.h>
 #include <paths.h>
 #include <pwd.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <signal.h>
 #include <unistd.h>
+#include <time.h>
 #include <utmpx.h>
 #include <wchar.h>
 #include <wctype.h>
@@ -80,8 +79,6 @@ int utmp_chk(char *, char *);
 int
 main(int argc, char **argv)
 {
-	unsigned long cmds[] = { TIOCGETA, TIOCGWINSZ, FIODGNAME };
-	cap_rights_t rights;
 	struct passwd *pwd;
 	time_t atime;
 	uid_t myuid;
@@ -95,30 +92,6 @@ main(int argc, char **argv)
 	devfd = open(_PATH_DEV, O_RDONLY);
 	if (devfd < 0)
 		err(1, "open(/dev)");
-	cap_rights_init(&rights, CAP_FCNTL, CAP_FSTAT, CAP_IOCTL, CAP_LOOKUP,
-	    CAP_PWRITE);
-	if (caph_rights_limit(devfd, &rights) < 0)
-		err(1, "can't limit devfd rights");
-
-	/*
-	 * Can't use capsicum helpers here because we need the additional
-	 * FIODGNAME ioctl.
-	 */
-	cap_rights_init(&rights, CAP_FCNTL, CAP_FSTAT, CAP_IOCTL, CAP_READ,
-	    CAP_WRITE);
-	if (caph_rights_limit(STDIN_FILENO, &rights) < 0 ||
-	    caph_rights_limit(STDOUT_FILENO, &rights) < 0 ||
-	    caph_rights_limit(STDERR_FILENO, &rights) < 0 ||
-	    caph_ioctls_limit(STDIN_FILENO, cmds, nitems(cmds)) < 0 ||
-	    caph_ioctls_limit(STDOUT_FILENO, cmds, nitems(cmds)) < 0 ||
-	    caph_ioctls_limit(STDERR_FILENO, cmds, nitems(cmds)) < 0 ||
-	    caph_fcntls_limit(STDIN_FILENO, CAP_FCNTL_GETFL) < 0 ||
-	    caph_fcntls_limit(STDOUT_FILENO, CAP_FCNTL_GETFL) < 0 ||
-	    caph_fcntls_limit(STDERR_FILENO, CAP_FCNTL_GETFL) < 0)
-		err(1, "can't limit stdio rights");
-
-	caph_cache_catpages();
-	caph_cache_tzdata();
 
 	/*
 	 * Cache UTX database fds.
@@ -137,9 +110,6 @@ main(int argc, char **argv)
 			login = "???";
 	}
 
-	if (caph_enter() < 0)
-		err(1, "cap_enter");
-
 	while (getopt(argc, argv, "") != -1)
 		usage();
 	argc -= optind;
@@ -203,7 +173,8 @@ utmp_chk(char *user, char *tty)
 {
 	struct utmpx lu, *u;
 
-	strncpy(lu.ut_line, tty, sizeof lu.ut_line);
+	strncpy(lu.ut_line, tty, sizeof lu.ut_line - 1);
+	lu.ut_line[sizeof lu.ut_line - 1] = '\0';
 	while ((u = getutxline(&lu)) != NULL)
 		if (u->ut_type == USER_PROCESS &&
 		    strcmp(user, u->ut_user) == 0) {
@@ -303,10 +274,9 @@ do_write(int devfd, char *tty, char *myt
 	fd = openat(devfd, tty, O_WRONLY);
 	if (fd < 0)
 		err(1, "openat(%s%s)", _PATH_DEV, tty);
-	fclose(stdout);
-	stdout = fdopen(fd, "w");
-	if (stdout == NULL)
+	if (dup2(fd, STDOUT_FILENO) < 0)
 		err(1, "%s%s", _PATH_DEV, tty);
+	close(fd);
 
 	(void)signal(SIGINT, done);
 	(void)signal(SIGHUP, done);
@@ -328,7 +298,7 @@ do_write(int devfd, char *tty, char *myt
  * done - cleanup and exit
  */
 void
-done(int n __unused)
+done(int n __attribute__((unused)))
 {
 	(void)printf("EOF\r\n");
 	exit(0);
