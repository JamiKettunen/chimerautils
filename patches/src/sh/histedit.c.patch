--- sh/histedit.c.orig	2022-05-12 06:53:55.000000000 +0200
+++ sh/histedit.c	2022-08-03 01:42:05.425061841 +0200
@@ -74,9 +74,13 @@ static FILE *el_in, *el_out;
 static char *fc_replace(const char *, char *, char *);
 static int not_fcnumber(const char *);
 static int str_to_event(const char *, int);
-static int comparator(const void *, const void *, void *);
+#ifdef HAVE_FN_COMPLETE2
+static int comparator(const void *, const void *);
 static char **sh_matches(const char *, int, int);
 static unsigned char sh_complete(EditLine *, int);
+#else
+#define sh_complete _el_fn_complete
+#endif
 
 /*
  * Set history and editing status.  Called whenever the status may
@@ -188,7 +192,7 @@ setterm(const char *term)
 }
 
 int
-histcmd(int argc, char **argv __unused)
+histcmd(int argc, char **argv __attribute__((unused)))
 {
 	int ch;
 	const char *editor = NULL;
@@ -513,16 +517,17 @@ bindcmd(int argc, char **argv)
 	return ret;
 }
 
+#ifdef HAVE_FN_COMPLETE2
+static size_t comp_curpos;
 /*
  * Comparator function for qsort(). The use of curpos here is to skip
  * characters that we already know to compare equal (common prefix).
  */
 static int
-comparator(const void *a, const void *b, void *thunk)
+comparator(const void *a, const void *b)
 {
-	size_t curpos = (intptr_t)thunk;
-	return (strcmp(*(char *const *)a + curpos,
-		*(char *const *)b + curpos));
+	return (strcmp(*(char *const *)a + comp_curpos,
+		*(char *const *)b + comp_curpos));
 }
 
 /*
@@ -592,8 +597,8 @@ out:
 	}
 	uniq = 1;
 	if (i > 1) {
-		qsort_s(matches + 1, i, sizeof(matches[0]), comparator,
-			(void *)(intptr_t)curpos);
+		comp_curpos = curpos;
+		qsort(matches + 1, i, sizeof(matches[0]), comparator);
 		for (size_t k = 2; k <= i; k++) {
 			const char *l = matches[uniq] + curpos;
 			const char *r = matches[k] + curpos;
@@ -639,18 +644,19 @@ out:
  * bind a key (tab by default) to execute the function.
  */
 unsigned char
-sh_complete(EditLine *sel, int ch __unused)
+sh_complete(EditLine *sel, int ch __attribute__((unused)))
 {
 	return (unsigned char)fn_complete2(sel, NULL, sh_matches,
 		L" \t\n\"\\'`@$><=;|&{(", NULL, NULL, (size_t)100,
 		NULL, &((int) {0}), NULL, NULL, FN_QUOTE_MATCH);
 }
+#endif
 
 #else
 #include "error.h"
 
 int
-histcmd(int argc __unused, char **argv __unused)
+histcmd(int argc __attribute__((unused)), char **argv __attribute__((unused)))
 {
 
 	error("not compiled with history support");
@@ -659,7 +665,7 @@ histcmd(int argc __unused, char **argv _
 }
 
 int
-bindcmd(int argc __unused, char **argv __unused)
+bindcmd(int argc __attribute__((unused)), char **argv __attribute__((unused)))
 {
 
 	error("not compiled with line editing support");
